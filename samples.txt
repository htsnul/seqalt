#### Hello World ####

@print("Hello World!");
@print("Hello \"Hello\" World!");

#### Arithmetic ####

@print((5 + 6) - (1 + 2) + (3 * 4));
@print((5 + 6) - (1 + 2) + 3 * 4);

#### Conditons ####

(3 < 5) && {
  @print("3 < 5")
};

(3 > 5) ? {
  @print("3 > 5")
} : {
  @print("Not 3 > 5")
};

"x" = 3;

((x == 2) || (x == 3)) && {
  @print("x is 2 or 3.")
}

#### Variable ####

"a" = 5;
@print(a);
"a" = (a + 3);
@print(a);

#### User function ####

"printSum" = (("v0", "v1") => {
  @print(
    v0 + " + " + v1 + " = " +
    (v0 + v1)
  );
});

@printSum(4, 5);
@printSum(6, 7);

"plus" = (() => {
  (args.l) + (args.r)
});

@print((1)plus(2));
@print((3)plus(4)plus(5));

#### Array ####

"nums" = [5, 6, 7, 8];

@print((nums)length());
@print(nums.1);
@print(nums.2);
"i" = 3;
@print(nums.(i));

[nums, 2] = 17;
[nums, i] = 18;
@print(nums.2);
@print(nums.(i));

"nested" = [[0, 1, 2], 3, 4, 5];

@print((nested)length());
@print((nested.0)length());
@print(nested.0.0);
@print(nested.0.1);
@print(nested.0.2);

[(nested.0), 1] = 8;
[nested, 2] = 9;
@print(nested.0.1);
@print(nested.2);

"nums1" = [(0, 1, 2), 3, 4 ,5];
"nums2" = ((0, 1, 2), 3, 4 ,5);

@print((nums1)length());
@print((nums2)length());

#### Fibonacci ####

"fib" = (("val") => {
  (val < 2) ? {
    val
  } : {
    (@fib(val - 1)) + (@fib(val - 2))
  }
});

@print(@fib(7));
@print(@fib(8));
@print(@fib(9));
@print(@fib(10));

#### Dictionary ####

"a" = { "b": 2, "c": { "d": 3 } };
@print(a.b);
@print(a.c.d);

[a, "b"] = 4;
[(a.c), "d"] = 5;
@print(a.b);
@print(a.c.d);

#### Varibale scoping ####

"a" = 1;
@print(a);

@(() => {
  @print(a);
  "a" = 2;
  @print(a);
})();
@print(a);

"b" = 3;
@print(b);

@(() => {
  @print(b);
  @var "b" = 4;
  @print(b);
})();
@print(b);

@(() => {
  "c" = 5;
  @print(c);
})();
@print(c);

#### Passing functions as argments ####

"callLOfR" = (() => (
  @(args.r.(args.l))();
));

0 callLOfR([
  (() => {
    @print("a");
  }),
  (() => {
    @print("b");
  })
]);

1 callLOfR([
  (() => {
    @print("c");
  }),
  (() => {
    @print("d");
  })
]);

#### Function array ####

"i" = 0;
"ary" = [
  (() => (@print("a"))),
  (() => (@print("b")))
];
@(ary.0)();
@(ary.1)();

#### Higher order functions ####

@range(3)forEach(("i") => {
  @print(i);
});

"nums" = (
  [1, 2, 3, 4]
  map(("v") => (v * 2))
  map(("v") => (v + 1))
);
(nums)forEach(("val") => (@print(val)));

#### Closure ####

"createCounter" = (() => {
  @var "count" = 0;
  (() => {
    @var "result" = count;
    "count" = (count + 1);
    result
  })
});

"c0" = (@createCounter());
"c1" = (@createCounter());

@print(@c0());
@print(@c0());
@print(@c1());
@print(@c1());

@print(@c0());
@print(@c1());

#### Class ####

"Position" = (("x", "y") => {
  @var "this" = {
    "x": x,
    "y": y,
    "move": (("x", "y") => {
      [this, "x"] = (this.x + x);
      [this, "y"] = (this.y + y);
    }),
    "print": (() => {
      @print((this.x) + ", " + (this.y));
    })
  }
});

"pos" = (@Position(0, 5));

@(pos.print)();
@(pos.move)(2, 2);
@(pos.print)();
@(pos.move)(3, 3);
@(pos.print)();

#### Comment ####

_// "This is comment";
@print("test");

@print(
  111 // "This is comment" + 222
);

