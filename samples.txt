#### Hello World ####

@print("Hello World!");
@print("Hello \"Hello\" World!");

#### Arithmetic ####

@print((5 + 6) - (1 + 2) + (3 * 4));
@print((5 + 6) - (1 + 2) + 3 * 4);

#### Condtions ####

0 && (@print(10));
1 && (@print(11));
1 && {
  @print(12);
};

#### Variable ####

"a" = 5;
@print(a);
"a" = (a + 3);
@print(a);

#### User function ####

"printSum" = (() => {
  @print(
    (args.r.0) + " + " + (args.r.1) + " = " +
    ((args.r.0) + (args.r.1))
  );
});

@printSum(4, 5);
@printSum(6, 7);

"printSumLr" = (() => {
  @print(
    (args.l) + " + " + (args.r) + " = " +
    ((args.l) + (args.r))
  );
});

(1)printSumLr(2);
(3)printSumLr(4);

#### Array ####

"nums0" = [[0, 1, 2], 3, 4, 5];
"nums1" = [(0, 1, 2), 3, 4 ,5];
"nums2" = ((0, 1, 2), 3, 4 ,5);

@print(@length(nums0));
@print(@length(nums1));
@print(@length(nums2));

#### Ternary operator ####

@print(0 ? 3 : 4);
@print(1 ? 3 : 4);
@print(0 ? 0 : 5);
@print(1 ? 0 : 5);

@print(0 && 3 || 4);
@print(1 && 3 || 4);
@print(0 && 0 || 5);
@print(1 && 0 || 5);

#### Fibonacci ####

"fib" = (() => {
  ((args.r) < 2) ? {
    args.r
  } : {
    (@fib(args.r - 1)) +
    (@fib(args.r - 2))
  }
});

@print(@fib(7));
@print(@fib(8));
@print(@fib(9));
@print(@fib(10));

#### Dictionary ####

"a" = (("b": 2) + ("c": ("d": 3)));
@print(a.b);
@print(a.c.d);
a, "b" = 4;
a.c, "d" = 5;
@print(a.b);
@print(a.c.d);

#### Varibale scoping ####

"a" = 1;
@print(a);

@(() => (
  @print(a);
  "a" = 4;
  @print(a);
))();
@print(a);

"b" = 1;
@print(b);

@(() => (
  @print(b);
  @var "b" = 4;
  @print(b);
))();
@print(b);

#### Passing functions as argments ####

"callLOfR" = (() => (
  @(args.r.(args.l))();
));

0 callLOfR((() => (
  @print("a");
)), (() => (
  @print("b");
)));

1 callLOfR((() => (
  @print("c");
)), (() => (
  @print("d");
)));

#### Function array ####

"i" = 0;
"ary" = (
  (() => (@print("a"))),
  (() => (@print("b")))
);
@(ary.0)();
@(ary.1)();

#### Array mapping ####

"nums" = (
  [1, 2, 3, 4]
  map(() => (args.r * 2))
  map(() => (args.r + 1))
);
(nums)forEach(() => (@print(args.r)));

#### Closure ####



